{"version":3,"sources":["components/FaceBox/FaceBox.js","components/FaceRecognition/FaceRecognition.js","components/Navigation/Navigation.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js","components/Logo/Money-mu.svg"],"names":["FaceBox","box","className","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","FaceRecognition","imageUrl","faceBoxes","getFaceBox","id","alt","src","width","height","map","i","key","region_info","bounding_box","Navigation","display","justifyContent","Logo","options","max","paddingTop","brain","ImageLinkForm","onInputChange","onSubmitButton","type","onChange","onClick","Rank","app","Clarifai","App","apiKey","ParticlesOptions","particles","number","value","density","enable","value_area","getFaceLocations","data","outputs","regions","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBoxes","setState","event","input","target","state","models","predict","FACE_DETECT_MODEL","then","response","catch","err","console","log","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.11430e93.chunk.js","sourcesContent":["import React from 'react';\nimport './FaceBox.css';\n\nconst FaceBox = ({ box }) => {\n    return (\n        <div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\n    );\n}\n\nexport default FaceBox;","import React from 'react';\r\nimport FaceBox from '../FaceBox/FaceBox';\r\n\r\nconst FaceRecognition = ({ imageUrl, faceBoxes, getFaceBox }) => {\r\n    return (\r\n       <div className='center ma'>\r\n           <div className='absolute mt2'>\r\n                <img id='inputimage' alt='' src={imageUrl} width='500px' height='auto' />\r\n                {\r\n                    faceBoxes.map((box, i) => {\r\n                        return (\r\n                            <FaceBox \r\n                                key={i} \r\n                                box={getFaceBox(box.region_info.bounding_box)}\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n               \r\n           </div>\r\n       </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n            <p className='f3 link dim black underline pa3 pointer'></p>\r\n        </nav>\r\n    );\r\n\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport brain from './Money-mu.svg';\r\nimport './Logo.css';\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <div className='ma4 mt0 center'>\r\n            <Tilt className='Tilt br shadow-1 tc' options={{ max : 55 }} style={{ height: 250, width: 250 }} >\r\n                <div className='Tilt-inner'>\r\n                    <img style={{paddingTop: '70px'}} alt='pfungwa' src={brain} /> </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({ onInputChange, onSubmitButton }) => {\r\n    return (\r\n       <div>\r\n           <p className='f3'>\r\n                {'Copy and paste picture URL and Try it out.'}\r\n           </p>\r\n        <div className='center'>\r\n            <div className='form center pa4 br3 shadow-5'>\r\n                <input className='f4 pa2 w-70 center' type='tex'onChange={onInputChange}/>\r\n                <button \r\n                    className='w-30 grow f4 link ph3 pv3 dib white bg-light-purple'\r\n                    onClick={onSubmitButton}\r\n                    >Detect \r\n                </button>\r\n            </div>\r\n        </div>\r\n       </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n//import './Rank.css';\r\n\r\nconst Rank = () => {\r\n    return (\r\n    <div>\r\n        <div className='white f3'>\r\n            \r\n        </div>\r\n        <div className='white f1'>\r\n             {'This Application will detect faces in pictures.'}\r\n        </div>\r\n    </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Rank;","import React, { Component } from 'react';\n//import React from 'react';\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: 'd88703de652f40c48c20740373b9166e'\n });\n\nconst ParticlesOptions = {\n  particles: {\n    number: {\n      value: 60,\n      density: {\n          enable: true,\n          value_area: 1500\n      }\n    }\n  }\n}\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      faceBoxes: []\n    }\n  }\n\n  getFaceLocations = (data) => {\n    const clarifaiFaces = data.outputs[0].data.regions;\n    return clarifaiFaces;\n  };\n\n  getFaceBox = (box) => {\n    //const box = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n   return{\n    leftCol: box.left_col * width,\n    topRow: box.top_row * height,\n    rightCol: width - (box.right_col * width),\n    bottomRow: height - (box.bottom_row * height)\n\n    /*\n    leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    */\n   }\n  }\n\n  displayFaceBoxes = (faceBoxes) => {\n    this.setState({faceBoxes: faceBoxes});\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onSubmitButton = () => {\n    this.setState({imageUrl: this.state.input});\n     // Predict the contents of an image by passing in a URL.\n     app.models\n     .predict(\n        Clarifai.FACE_DETECT_MODEL, \n        this.state.input)\n      .then(response => this.displayFaceBoxes(this.getFaceLocations(response)))\n      .catch(err => console.log(err));\n\n      //  console.log(response.outputs[0].data.regions[0].region_info.bounding_box);\n    \n  }\n\n  render() {\n    \n    return (\n      <div className='App'>\n        <Particles className='particles' \n                params={ParticlesOptions}\n              />\n        <Navigation />\n         <Logo />\n         <Rank />\n        <ImageLinkForm \n          onInputChange={this.onInputChange} \n          onSubmitButton={this.onSubmitButton}\n        />\n       <FaceRecognition \n          faceBoxes={this.state.faceBoxes} \n          imageUrl={this.state.imageUrl}\n          getFaceBox={this.getFaceBox}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Money-mu.195d0634.svg\";"],"sourceRoot":""}